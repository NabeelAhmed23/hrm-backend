// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  HR
  ADMIN
  SUPERADMIN
}

enum NotificationType {
  INVITE
  DOCUMENT
  ALERT
  REMINDER
  INFO
}

enum DocumentType {
  CONTRACT
  LICENSE
  CERTIFICATION
  POLICY
  OTHER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Each user belongs to exactly one organization
  organizationId String
  organization   Organization @relation("OrganizationUsers", fields: [organizationId], references: [id])

  // Relationships
  sessions  Session[]
  employee  Employee? // If this user is also an employee in one org
  documents Document[] @relation("DocumentUploads") // Documents uploaded by this user
  notifications Notification[] // Notifications for this user
  passwordResetTokens PasswordResetToken[] // Password reset tokens for this user
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  industry  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users     User[]     @relation("OrganizationUsers") // All users in this organization
  employees Employee[]
  documents Document[] @relation("OrganizationDocuments")
  notifications Notification[] // Notifications for this organization
}

model Employee {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  address   String
  city      String
  state     String
  country   String
  dob       DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete field

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  documents Document[] @relation("EmployeeDocuments")
}

model Document {
  id          String      @id @default(uuid())
  title       String      // Document title
  description String?     // Optional description
  type        DocumentType // Document category
  fileUrl     String      // Local path or S3 URL
  fileName    String      // Original file name
  fileSize    Int         // File size in bytes
  mimeType    String      // MIME type of file
  metadata    Json?       @db.JsonB // Additional structured data
  expiresAt   DateTime?   // Optional expiry date
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?   // Soft delete timestamp

  // Relationships
  uploadedById String
  uploadedBy   User   @relation("DocumentUploads", fields: [uploadedById], references: [id])
  
  organizationId String
  organization   Organization @relation("OrganizationDocuments", fields: [organizationId], references: [id], onDelete: Cascade)
  
  employeeId String?
  employee   Employee? @relation("EmployeeDocuments", fields: [employeeId], references: [id])

  // Indexes for performance
  @@index([organizationId])
  @@index([employeeId])
  @@index([uploadedById])
  @@index([type])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([deletedAt])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  title     String   // Notification title
  message   String   // Notification content
  type      NotificationType // Notification category
  metadata  Json?    @db.JsonB // Optional structured data
  isRead    Boolean  @default(false) // Read status
  createdAt DateTime @default(now())

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  userId String? // Nullable - if null, it's a broadcast to all org users
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([organizationId])
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique // Secure random token
  userId    String   // User requesting password reset
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // Token expiry timestamp (typically 1 hour from creation)
  used      Boolean  @default(false) // Single-use token flag
  createdAt DateTime @default(now())

  // Indexes for performance
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([used])
}
